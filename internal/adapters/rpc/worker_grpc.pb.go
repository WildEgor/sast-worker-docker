// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: proto/worker.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SASTWorkerClient is the client API for SASTWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SASTWorkerClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AnalyzeFile(ctx context.Context, in *AnalyzeDockerfileRequest, opts ...grpc.CallOption) (*AnalyzeFileResponse, error)
}

type sASTWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewSASTWorkerClient(cc grpc.ClientConnInterface) SASTWorkerClient {
	return &sASTWorkerClient{cc}
}

func (c *sASTWorkerClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/worker.v1.SASTWorker/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sASTWorkerClient) AnalyzeFile(ctx context.Context, in *AnalyzeDockerfileRequest, opts ...grpc.CallOption) (*AnalyzeFileResponse, error) {
	out := new(AnalyzeFileResponse)
	err := c.cc.Invoke(ctx, "/worker.v1.SASTWorker/AnalyzeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SASTWorkerServer is the server API for SASTWorker service.
// All implementations must embed UnimplementedSASTWorkerServer
// for forward compatibility
type SASTWorkerServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	AnalyzeFile(context.Context, *AnalyzeDockerfileRequest) (*AnalyzeFileResponse, error)
	mustEmbedUnimplementedSASTWorkerServer()
}

// UnimplementedSASTWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedSASTWorkerServer struct {
}

func (UnimplementedSASTWorkerServer) HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSASTWorkerServer) AnalyzeFile(context.Context, *AnalyzeDockerfileRequest) (*AnalyzeFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeFile not implemented")
}
func (UnimplementedSASTWorkerServer) mustEmbedUnimplementedSASTWorkerServer() {}

// UnsafeSASTWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SASTWorkerServer will
// result in compilation errors.
type UnsafeSASTWorkerServer interface {
	mustEmbedUnimplementedSASTWorkerServer()
}

func RegisterSASTWorkerServer(s grpc.ServiceRegistrar, srv SASTWorkerServer) {
	s.RegisterService(&SASTWorker_ServiceDesc, srv)
}

func _SASTWorker_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SASTWorkerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.v1.SASTWorker/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SASTWorkerServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SASTWorker_AnalyzeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeDockerfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SASTWorkerServer).AnalyzeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.v1.SASTWorker/AnalyzeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SASTWorkerServer).AnalyzeFile(ctx, req.(*AnalyzeDockerfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SASTWorker_ServiceDesc is the grpc.ServiceDesc for SASTWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SASTWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.v1.SASTWorker",
	HandlerType: (*SASTWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _SASTWorker_HealthCheck_Handler,
		},
		{
			MethodName: "AnalyzeFile",
			Handler:    _SASTWorker_AnalyzeFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/worker.proto",
}
